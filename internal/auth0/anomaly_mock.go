// Code generated by MockGen. DO NOT EDIT.
// Source: anomaly.go

// Package auth0 is a generated GoMock package.
package auth0

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	management "gopkg.in/auth0.v5/management"
)

// MockAnomalyAPI is a mock of AnomalyAPI interface.
type MockAnomalyAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAnomalyAPIMockRecorder
}

// MockAnomalyAPIMockRecorder is the mock recorder for MockAnomalyAPI.
type MockAnomalyAPIMockRecorder struct {
	mock *MockAnomalyAPI
}

// NewMockAnomalyAPI creates a new mock instance.
func NewMockAnomalyAPI(ctrl *gomock.Controller) *MockAnomalyAPI {
	mock := &MockAnomalyAPI{ctrl: ctrl}
	mock.recorder = &MockAnomalyAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnomalyAPI) EXPECT() *MockAnomalyAPIMockRecorder {
	return m.recorder
}

// CheckIP mocks base method.
func (m *MockAnomalyAPI) CheckIP(ip string, opts ...management.RequestOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ip}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIP", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIP indicates an expected call of CheckIP.
func (mr *MockAnomalyAPIMockRecorder) CheckIP(ip interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ip}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIP", reflect.TypeOf((*MockAnomalyAPI)(nil).CheckIP), varargs...)
}

// UnblockIP mocks base method.
func (m *MockAnomalyAPI) UnblockIP(ip string, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ip}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnblockIP", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockIP indicates an expected call of UnblockIP.
func (mr *MockAnomalyAPIMockRecorder) UnblockIP(ip interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ip}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockIP", reflect.TypeOf((*MockAnomalyAPI)(nil).UnblockIP), varargs...)
}
