// Code generated by MockGen. DO NOT EDIT.
// Source: user_attribute_profiles.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	management "github.com/auth0/go-auth0/management"
	gomock "github.com/golang/mock/gomock"
)

// MockUserAttributeProfilesAPI is a mock of UserAttributeProfilesAPI interface.
type MockUserAttributeProfilesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUserAttributeProfilesAPIMockRecorder
}

// MockUserAttributeProfilesAPIMockRecorder is the mock recorder for MockUserAttributeProfilesAPI.
type MockUserAttributeProfilesAPIMockRecorder struct {
	mock *MockUserAttributeProfilesAPI
}

// NewMockUserAttributeProfilesAPI creates a new mock instance.
func NewMockUserAttributeProfilesAPI(ctrl *gomock.Controller) *MockUserAttributeProfilesAPI {
	mock := &MockUserAttributeProfilesAPI{ctrl: ctrl}
	mock.recorder = &MockUserAttributeProfilesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAttributeProfilesAPI) EXPECT() *MockUserAttributeProfilesAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserAttributeProfilesAPI) Create(ctx context.Context, p *management.UserAttributeProfile, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, p}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAttributeProfilesAPIMockRecorder) Create(ctx, p interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, p}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockUserAttributeProfilesAPI) Delete(ctx context.Context, id string, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserAttributeProfilesAPIMockRecorder) Delete(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).Delete), varargs...)
}

// GetTemplate mocks base method.
func (m *MockUserAttributeProfilesAPI) GetTemplate(ctx context.Context, id string, opts ...management.RequestOption) (*management.UserAttributeProfileTemplateItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*management.UserAttributeProfileTemplateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockUserAttributeProfilesAPIMockRecorder) GetTemplate(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).GetTemplate), varargs...)
}

// List mocks base method.
func (m *MockUserAttributeProfilesAPI) List(ctx context.Context, opts ...management.RequestOption) (*management.UserAttributeProfileList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*management.UserAttributeProfileList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserAttributeProfilesAPIMockRecorder) List(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).List), varargs...)
}

// ListTemplates mocks base method.
func (m *MockUserAttributeProfilesAPI) ListTemplates(ctx context.Context, opts ...management.RequestOption) (*management.UserAttributeProfileTemplateList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].(*management.UserAttributeProfileTemplateList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockUserAttributeProfilesAPIMockRecorder) ListTemplates(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).ListTemplates), varargs...)
}

// Read mocks base method.
func (m *MockUserAttributeProfilesAPI) Read(ctx context.Context, id string, opts ...management.RequestOption) (*management.UserAttributeProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*management.UserAttributeProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockUserAttributeProfilesAPIMockRecorder) Read(ctx, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).Read), varargs...)
}

// Update mocks base method.
func (m *MockUserAttributeProfilesAPI) Update(ctx context.Context, id string, p *management.UserAttributeProfile, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, p}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserAttributeProfilesAPIMockRecorder) Update(ctx, id, p interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, p}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAttributeProfilesAPI)(nil).Update), varargs...)
}
