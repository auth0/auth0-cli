// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth0/branding.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	management "github.com/auth0/go-auth0/management"
	gomock "github.com/golang/mock/gomock"
)

// MockBrandingAPI is a mock of BrandingAPI interface.
type MockBrandingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBrandingAPIMockRecorder
}

// MockBrandingAPIMockRecorder is the mock recorder for MockBrandingAPI.
type MockBrandingAPIMockRecorder struct {
	mock *MockBrandingAPI
}

// NewMockBrandingAPI creates a new mock instance.
func NewMockBrandingAPI(ctrl *gomock.Controller) *MockBrandingAPI {
	mock := &MockBrandingAPI{ctrl: ctrl}
	mock.recorder = &MockBrandingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandingAPI) EXPECT() *MockBrandingAPIMockRecorder {
	return m.recorder
}

// DeleteUniversalLogin mocks base method.
func (m *MockBrandingAPI) DeleteUniversalLogin(opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUniversalLogin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUniversalLogin indicates an expected call of DeleteUniversalLogin.
func (mr *MockBrandingAPIMockRecorder) DeleteUniversalLogin(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUniversalLogin", reflect.TypeOf((*MockBrandingAPI)(nil).DeleteUniversalLogin), opts...)
}

// Read mocks base method.
func (m *MockBrandingAPI) Read(opts ...management.RequestOption) (*management.Branding, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*management.Branding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBrandingAPIMockRecorder) Read(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBrandingAPI)(nil).Read), opts...)
}

// SetUniversalLogin mocks base method.
func (m *MockBrandingAPI) SetUniversalLogin(ul *management.BrandingUniversalLogin, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ul}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUniversalLogin", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUniversalLogin indicates an expected call of SetUniversalLogin.
func (mr *MockBrandingAPIMockRecorder) SetUniversalLogin(ul interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ul}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUniversalLogin", reflect.TypeOf((*MockBrandingAPI)(nil).SetUniversalLogin), varargs...)
}

// UniversalLogin mocks base method.
func (m *MockBrandingAPI) UniversalLogin(opts ...management.RequestOption) (*management.BrandingUniversalLogin, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UniversalLogin", varargs...)
	ret0, _ := ret[0].(*management.BrandingUniversalLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniversalLogin indicates an expected call of UniversalLogin.
func (mr *MockBrandingAPIMockRecorder) UniversalLogin(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniversalLogin", reflect.TypeOf((*MockBrandingAPI)(nil).UniversalLogin), opts...)
}

// Update mocks base method.
func (m *MockBrandingAPI) Update(t *management.Branding, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{t}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBrandingAPIMockRecorder) Update(t interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{t}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBrandingAPI)(nil).Update), varargs...)
}
