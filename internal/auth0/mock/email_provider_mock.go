// Code generated by MockGen. DO NOT EDIT.
// Source: action.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	management "github.com/auth0/go-auth0/management"
	gomock "github.com/golang/mock/gomock"
)

// MockEmailProviderAPI is a mock of EmailProviderAPI interface.
type MockEmailProviderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderAPIMockRecorder
}

// MockEmailProviderAPIMockRecorder is the mock recorder for MockEmailProviderAPI.
type MockEmailProviderAPIMockRecorder struct {
	mock *MockEmailProviderAPI
}

// NewMockEmailProviderAPI creates a new mock instance.
func NewMockEmailProviderAPI(ctrl *gomock.Controller) *MockEmailProviderAPI {
	mock := &MockEmailProviderAPI{ctrl: ctrl}
	mock.recorder = &MockEmailProviderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProviderAPI) EXPECT() *MockEmailProviderAPIMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockEmailProviderAPI) Read(ctx context.Context, opts ...management.RequestOption) (*management.EmailProvider, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*management.EmailProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockEmailProviderAPIMockRecorder) Read(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEmailProviderAPI)(nil).Read), varargs...)
}