// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth0/role.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	management "github.com/auth0/go-auth0/management"
	gomock "github.com/golang/mock/gomock"
)

// MockRoleAPI is a mock of RoleAPI interface.
type MockRoleAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRoleAPIMockRecorder
}

// MockRoleAPIMockRecorder is the mock recorder for MockRoleAPI.
type MockRoleAPIMockRecorder struct {
	mock *MockRoleAPI
}

// NewMockRoleAPI creates a new mock instance.
func NewMockRoleAPI(ctrl *gomock.Controller) *MockRoleAPI {
	mock := &MockRoleAPI{ctrl: ctrl}
	mock.recorder = &MockRoleAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleAPI) EXPECT() *MockRoleAPIMockRecorder {
	return m.recorder
}

// AssociatePermissions mocks base method.
func (m *MockRoleAPI) AssociatePermissions(id string, permissions []*management.Permission, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id, permissions}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociatePermissions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociatePermissions indicates an expected call of AssociatePermissions.
func (mr *MockRoleAPIMockRecorder) AssociatePermissions(id, permissions interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id, permissions}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociatePermissions", reflect.TypeOf((*MockRoleAPI)(nil).AssociatePermissions), varargs...)
}

// Create mocks base method.
func (m *MockRoleAPI) Create(r *management.Role, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{r}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleAPIMockRecorder) Create(r interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleAPI)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockRoleAPI) Delete(id string, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleAPIMockRecorder) Delete(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleAPI)(nil).Delete), varargs...)
}

// List mocks base method.
func (m *MockRoleAPI) List(opts ...management.RequestOption) (*management.RoleList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*management.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleAPIMockRecorder) List(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleAPI)(nil).List), opts...)
}

// Permissions mocks base method.
func (m *MockRoleAPI) Permissions(id string, opts ...management.RequestOption) (*management.PermissionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Permissions", varargs...)
	ret0, _ := ret[0].(*management.PermissionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Permissions indicates an expected call of Permissions.
func (mr *MockRoleAPIMockRecorder) Permissions(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockRoleAPI)(nil).Permissions), varargs...)
}

// Read mocks base method.
func (m *MockRoleAPI) Read(id string, opts ...management.RequestOption) (*management.Role, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*management.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRoleAPIMockRecorder) Read(id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRoleAPI)(nil).Read), varargs...)
}

// RemovePermissions mocks base method.
func (m *MockRoleAPI) RemovePermissions(id string, permissions []*management.Permission, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id, permissions}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePermissions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissions indicates an expected call of RemovePermissions.
func (mr *MockRoleAPIMockRecorder) RemovePermissions(id, permissions interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id, permissions}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissions", reflect.TypeOf((*MockRoleAPI)(nil).RemovePermissions), varargs...)
}

// Update mocks base method.
func (m *MockRoleAPI) Update(id string, r *management.Role, opts ...management.RequestOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{id, r}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleAPIMockRecorder) Update(id, r interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id, r}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleAPI)(nil).Update), varargs...)
}
