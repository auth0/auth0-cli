config:
  inherit-env: true

tests:
  auth0 apis list:
    exit-code: 0

  auth0 tenants list:
    exit-code: 0

  auth0 roles list:
    exit-code: 0

  auth0 rules list:
    exit-code: 0

  auth0 orgs list:
    exit-code: 0

  auth0 domains list:
    exit-code: 0

  auth0 quickstarts list:
    exit-code: 0

  auth0 completion bash:
    exit-code: 0

  # Test 'apis create'
  apis create and check data:
    command: auth0 apis create --name integration-test-api-def1 --identifier http://integration-test-api-def1 --scopes read:todos,write:todos --json
    exit-code: 0
    stdout:
      json:
        name: integration-test-api-def1
        identifier: http://integration-test-api-def1
        scopes: "[map[value:read:todos] map[value:write:todos]]"
        token_lifetime: "86400"
        allow_offline_access: "false"

  apis create and check output:
    command: auth0 apis create --name integration-test-api-def2 --identifier http://integration-test-api-def2 --scopes read:todos,write:todos
    exit-code: 0
    stdout:
      contains:
        - NAME                  integration-test-api-def2
        - IDENTIFIER            http://integration-test-api-def2
        - SCOPES                read:todos write:todos
        - TOKEN LIFETIME        86400
        - ALLOW OFFLINE ACCESS  ✗

  # Test 'apis create' --token-lifetime flag
  apis create token lifetime 1000 and check data:
    command: auth0 apis create --name integration-test-api-toklif1 --identifier http://integration-test-api-toklif1 --scopes read:todos --token-lifetime 1000 --json
    exit-code: 0
    stdout:
      json:
        token_lifetime: "1000"

  apis create token lifetime 1000 and check output:
    command: auth0 apis create --name integration-test-api-toklif2 --identifier http://integration-test-api-toklif2 --scopes read:todos --token-lifetime 1000
    exit-code: 0
    stdout:
      contains:
        - TOKEN LIFETIME        1000

  # Test 'apis create' --offline-access flag
  apis create offline access true and check data:
    command: auth0 apis create --name integration-test-api-offacc1 --identifier http://integration-test-api-offacc1 --scopes read:todos --offline-access --json
    exit-code: 0
    stdout:
      json:
        allow_offline_access: "true"

  apis create offline access true and check output:
    command: auth0 apis create --name integration-test-api-offacc2 --identifier http://integration-test-api-offacc2 --scopes read:todos --offline-access
    exit-code: 0
    stdout:
      contains:
        - ALLOW OFFLINE ACCESS  ✓

  apis create offline access false and check data:
    command: auth0 apis create --name integration-test-api-offacc3 --identifier http://integration-test-api-offacc3 --scopes read:todos --offline-access=false --json
    exit-code: 0
    stdout:
      json:
        allow_offline_access: "false"

  apis create test api: # create an api and capture its id
    command: ./test/integration/scripts/get-api-id.sh
    exit-code: 0

  apis show json:
    command: auth0 apis show $(cat ./test/integration/identifiers/api-id) --json # depends on "apis create test app" test
    stdout:
      json:
        name: integration-test-api-newapi
        identifier: http://integration-test-api-newapi
        scopes: "[map[value:read:todos]]"
        token_lifetime: "86400"
        allow_offline_access: "false"
    exit-code: 0

  apis show:
    command: auth0 apis show $(cat ./test/integration/identifiers/api-id) # depends on "apis create test app" test
    stdout:
      contains:
        - NAME                  integration-test-api-newapi
        - IDENTIFIER            http://integration-test-api-newapi
        - SCOPES                read:todos
        - TOKEN LIFETIME        86400
        - ALLOW OFFLINE ACCESS  ✗
    exit-code: 0

  apis scopes list:
    command: auth0 apis scopes list $(cat ./test/integration/identifiers/api-id) # depends on "apis create test app" test
    exit-code: 0

  # Test 'apis update'; all tests depend on "apis create test api" test
  apis update name:
    command: auth0 apis update $(cat ./test/integration/identifiers/api-id) --name integration-test-api-betterApiName --json
    stdout:
      json:
        name: integration-test-api-betterApiName
    exit-code: 0

  apis update scopes:
    command: auth0 apis update $(cat ./test/integration/identifiers/api-id) --scopes read:todos,write:todos --json
    stdout:
      json:
        scopes: "[map[value:read:todos] map[value:write:todos]]"
    exit-code: 0

  apis update token lifetime:
    command: auth0 apis update $(cat ./test/integration/identifiers/api-id) --token-lifetime 1000 --json
    stdout:
      json:
        token_lifetime: "1000"
    exit-code: 0

  apis update offline access true:
    command: auth0 apis update $(cat ./test/integration/identifiers/api-id) --offline-access --json
    stdout:
      json:
        allow_offline_access: "true"
    exit-code: 0

  apis update offline access false:
    command: auth0 apis update $(cat ./test/integration/identifiers/api-id) --offline-access=false --json
    stdout:
      json:
        allow_offline_access: "false"
    exit-code: 0

  # Test 'users create'
  users create and check data:
    command: auth0 users create --name integration-test-user-new --connection Username-Password-Authentication --email testuser@example.com --password testUser12 --username testuser1 --json --no-input
    exit-code: 0
    stdout:
      json:
        email: "testuser@example.com"
        connection: "Username-Password-Authentication"

  users create and check output:
    command: auth0 users create --name integration-test-user-new2 --connection Username-Password-Authentication --email testuser2@example.com --password testUser12 --username testuser2 --no-input
    exit-code: 0
    stdout:
      contains:
        - EMAIL       testuser2@example.com
        - CONNECTION  Username-Password-Authentication

  # Test 'users show'
  users create test user:
    command: ./test/integration/scripts/get-user-id.sh
    exit-code: 0

  users show json:
    command: auth0 users show $(cat ./test/integration/identifiers/user-id) --json
    stdout:
      json:
        email: "newuser@example.com"
        connection: "Username-Password-Authentication"
    exit-code: 0

  users show:
    command: auth0 users show $(cat ./test/integration/identifiers/user-id)
    stdout:
      contains:
        - EMAIL       newuser@example.com
        - CONNECTION  Username-Password-Authentication
    exit-code: 0

  users search:
    command: auth0 users search --query user_id:"$(cat ./test/integration/identifiers/user-id)" --number 1 --sort "name:-1"
    exit-code: 0
    stdout:
      contains:
        - newuser@example.com

  # Test 'users update'
  users update email:
    command: auth0 users update $(cat ./test/integration/identifiers/user-id)  --email betteruser@example.com  --json --no-input
    stdout:
      json:
        email: betteruser@example.com
    exit-code: 0

  users update name:
    command: auth0 users update $(cat ./test/integration/identifiers/user-id)  --name integration-test-user-bettername  --json --no-input
    stdout:
      json:
        email: betteruser@example.com # Name is not being displayed, hence using email
    exit-code: 0

  # Test 'roles create'
  roles create and check data:
    command: auth0 roles create --name integration-test-role-new1 --description testRole --json --no-input
    exit-code: 0
    stdout:
      json:
        name: integration-test-role-new1
        description: testRole

  roles create and check output:
    command: auth0 roles create --name integration-test-role-new2 --description testRole2 --no-input
    stdout:
      contains:
        - NAME         integration-test-role-new2
        - DESCRIPTION  testRole2
    exit-code: 0

  # Test 'roles show'
  roles create test role:
    command: ./test/integration/scripts/get-role-id.sh
    exit-code: 0

  roles show json:
    command: auth0 roles show $(cat ./test/integration/identifiers/role-id) --json
    stdout:
      json:
        name: integration-test-role-newRole
        description: integration-test-role
    exit-code: 0

  roles show:
    command: auth0 roles show $(cat ./test/integration/identifiers/role-id)
    stdout:
      contains:
        - NAME         integration-test-role-newRole
        - DESCRIPTION  integration-test-role
    exit-code: 0

  # Test 'roles update'
  roles update name:
    command: auth0 roles update $(cat ./test/integration/identifiers/role-id) --name integration-test-role-betterName --json
    stdout:
      json:
        name: integration-test-role-betterName
    exit-code: 0

  roles update description:
    command: auth0 roles update $(cat ./test/integration/identifiers/role-id) --description betterDescription --json
    stdout:
      json:
        description: betterDescription
    exit-code: 0

  # Test 'rules create'
  rules create and check data:
    command: cat ./test/integration/fixtures/create-rule.json | jq '.[0]' | auth0 rules create --json
    stdout:
      json:
        name: integration-test-rule-new1
        enabled: "true"
        order: "1"
        script: "function(user, context, cb) {\n  cb(null, user, context);\n}\n"
    exit-code: 0

  rules create and check output:
    command: cat ./test/integration/fixtures/create-rule.json | jq '.[1]' | auth0 rules create
    stdout:
      contains:
        - NAME     integration-test-rule-new2
        - ENABLED  ✗
        - ORDER    2
        - SCRIPT   function(user, context, cb) {
    exit-code: 0

  # Test 'rules show'
  rules create test rule:
    command: ./test/integration/scripts/get-rule-id.sh
    exit-code: 0

  rules show json:
    command: auth0 rules show $(cat ./test/integration/identifiers/rule-id) --json
    stdout:
      json:
        name: integration-test-rule-newRule
        enabled: "true"
        order: "3"
    exit-code: 0

  rules show:
    command: auth0 rules show $(cat ./test/integration/identifiers/rule-id)
    stdout:
      contains:
        - NAME     integration-test-rule-newRule
        - ENABLED  ✓
        - ORDER    3
    exit-code: 0

  # Test 'rules update'
  rules update:
    command: cat ./test/integration/fixtures/update-rule.json | auth0 rules update --json
    stdout:
      json:
        name: integration-test-rule-betterName
        enabled: "false"
    exit-code: 0

  # Test 'rules enable'
  rules enable:
    command: auth0 rules enable $(cat ./test/integration/identifiers/rule-id) --json
    stdout:
      json:
        enabled: "true"
    exit-code: 0

  # Test 'rules disable'
  rules disable:
    command: auth0 rules disable $(cat ./test/integration/identifiers/rule-id) --json
    stdout:
      json:
        enabled: "false"
    exit-code: 0

  attack protection show breached password detection:
    command: auth0 attack-protection breached-password-detection show
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ADMIN_NOTIFICATION_FREQUENCY
        - METHOD
    exit-code: 0

  attack protection show brute force protection:
    command: auth0 attack-protection brute-force-protection show
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ALLOW_LIST
        - MODE
        - MAX_ATTEMPTS
    exit-code: 0

  attack protection show suspicious ip throttling:
    command: auth0 attack-protection suspicious-ip-throttling show
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ALLOW_LIST
        - STAGE_PRE_LOGIN_MAX_ATTEMPTS
        - STAGE_PRE_LOGIN_RATE
        - STAGE_PRE_USER_REGISTRATION_MAX_ATTEMPTS
        - STAGE_PRE_USER_REGISTRATION_RATE
    exit-code: 0

  attack protection update breached password detection:
    command: auth0 attack-protection breached-password-detection update --enabled
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ADMIN_NOTIFICATION_FREQUENCY
        - METHOD
    exit-code: 0

  attack protection update brute force protection:
    command: auth0 attack-protection brute-force-protection update --enabled
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ALLOW_LIST
        - MODE
        - MAX_ATTEMPTS
    exit-code: 0

  attack protection update suspicious ip throttling:
    command: auth0 attack-protection suspicious-ip-throttling update --enabled
    stdout:
      contains:
        - ENABLED
        - SHIELDS
        - ALLOW_LIST
        - STAGE_PRE_LOGIN_MAX_ATTEMPTS
        - STAGE_PRE_LOGIN_RATE
        - STAGE_PRE_USER_REGISTRATION_MAX_ATTEMPTS
        - STAGE_PRE_USER_REGISTRATION_RATE
    exit-code: 0

  create organization and check json output:
    command: auth0 orgs create --name integration-test-org-new --display "Integration Test Organization" --json --no-input
    exit-code: 0
    stdout:
      json:
        name: "integration-test-org-new"
        display_name: "Integration Test Organization"

  create organization and check table output:
    command: auth0 orgs create --name integration-test-org-new2 --display "Integration Test Organization2" --no-input
    exit-code: 0
    stdout:
      contains:
        - NAME              integration-test-org-new2
        - DISPLAY NAME      Integration Test Organization2

  create organization to use in other tests:
    command: ./test/integration/scripts/get-org-id.sh
    exit-code: 0

  show organization and check json output:
    command: auth0 orgs show $(cat ./test/integration/identifiers/org-id) --json
    exit-code: 0
    stdout:
      json:
        name: "integration-test-org-better"
        display_name: "Integration Test Better Organization"

  show organization and check table output:
    command: auth0 orgs show $(cat ./test/integration/identifiers/org-id)
    exit-code: 0
    stdout:
      contains:
        - NAME              integration-test-org-better
        - DISPLAY NAME      Integration Test Better Organization

  update organization:
    command: auth0 orgs update $(cat ./test/integration/identifiers/org-id) -d "Integration Test Updated Organization" -a "#00FFAA" -b "#AA1166" --json --no-input
    exit-code: 0
    stdout:
      json:
        name: "integration-test-org-better"
        display_name: "Integration Test Updated Organization"
        branding.colors.page_background: "#AA1166"
        branding.colors.primary: "#00FFAA"

  update universal login branding prompts (login):
    command: cat ./test/integration/fixtures/update-ul-prompts-login.json | auth0 ul prompts update login
    exit-code: 0

  update universal login branding prompts (mfa-push):
    command: cat ./test/integration/fixtures/update-ul-prompts-mfa-push.json | auth0 ul prompts update mfa-push
    exit-code: 0

  users roles show:
    command: auth0 users roles show $(cat ./test/integration/identifiers/user-id)
    exit-code: 0

  users roles add:
    command: auth0 users roles add $(cat ./test/integration/identifiers/user-id) -r $(cat ./test/integration/identifiers/role-id)
    exit-code: 0

  users roles remove:
    command: auth0 users roles rm $(cat ./test/integration/identifiers/user-id) -r $(cat ./test/integration/identifiers/role-id)
    exit-code: 0
